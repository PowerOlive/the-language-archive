#lang lazy
{require (file "cons.rkt")}

{define (子 甲 乙) (→名/構 '子 `(,甲 ,乙))}
{define (一 . xs) (→名/構 '一 xs)}

{define 物:類
  (→類/或
   列/連:類 列/空:類
   集:類
   名/文:類 名/構:類
   "WIP")}

{define 一<物:類> `(,物:類)}
{define 二<物:類> `(,物:類 ,物:類)}

{define 類/列/連 (子 '類 (子 '列 '連))}
{define (→列/連:類 甲 乙) (→構 類/列/連 `(,甲 ,乙))}
{define 列/連:類 (→列/連:類 物:類 物:類)}
{define 列/空:類 (→構 (子 '類 (子 '列 '空)) '())}
{define 列:類 (→類/或 列/空:類 (→列/連:類 物:類 列:類))}

{define 類/集 (子 '類 '集)}
{define 集:類 (→構 類/集 `(,列:類))}

{define 類/或 (子 '類 '或)}
{define (→類/或 . xs) (→構 類/或 `(,(apply 集 xs)))}

{define 類/<名/文> (子 '類 (子 '名 '文))}
{define 類/<名/構> (子 '類 (子 '名 '構))}
{define 名/文:類 (→構 類/<名/文> '())}
{define 名/構:類 (→構 類/<名/構> 二<物:類>)}
{define 類/:名/文 (子 '類 (一 名/文:類))}

{define 陰:類 (→構 (子 '類 '陰) '())}
{define 陽:類 (→構 (子 '類 '陽) '())}
{define 陰、陽:類 (→類/或 陰:類 陽:類)}

{define 類/化 (子 '類 '化)}
{define 化:類 (→構 類/化 二<物:類>)}

{define 類/表 (子 '類 '表)}
{define 表:類 (→構 類/表 `(,{letrec ([x (→類/或 列/空:類 (→列/連:類 (→列/連:類 物:類 (→列/連:類 物:類 列/空:類)) x))]) x}))}
